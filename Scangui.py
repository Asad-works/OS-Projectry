{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f0814de8-b88e-4fdf-baeb-f5dc88b3ae8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import socket\n",
    "import subprocess\n",
    "import platform\n",
    "import hashlib\n",
    "import tkinter as tk\n",
    "from tkinter import scrolledtext, messagebox\n",
    "import threading\n",
    "\n",
    "scan_running = False  # Flag to control scanning\n",
    "\n",
    "# Function to scan open ports\n",
    "def scan_ports(target):\n",
    "    global scan_running\n",
    "    open_ports = []\n",
    "    for port in range(1, 36):  # Scanning all ports\n",
    "        if not scan_running:\n",
    "            status_box.insert(tk.END, \"Scan stopped by user.\\n\")\n",
    "            status_box.see(tk.END)\n",
    "            return []\n",
    "        status_box.insert(tk.END, f\"Scanning port {port}...\\n\")\n",
    "        status_box.see(tk.END)\n",
    "        root.update()\n",
    "        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n",
    "        sock.settimeout(0.2)\n",
    "        result = sock.connect_ex((target, port))\n",
    "        if result == 0:\n",
    "            open_ports.append(port)\n",
    "        sock.close()\n",
    "    return open_ports\n",
    "\n",
    "# Function to check outdated software\n",
    "def check_software():\n",
    "    status_box.insert(tk.END, \"Checking installed software versions...\\n\")\n",
    "    status_box.see(tk.END)\n",
    "    root.update()\n",
    "    outdated = []\n",
    "    try:\n",
    "        if platform.system() == \"Linux\":\n",
    "            result = subprocess.check_output(\"dpkg -l\", shell=True).decode()\n",
    "            if \"python2\" in result:\n",
    "                outdated.append(\"Python 2 (deprecated)\")\n",
    "        elif platform.system() == \"Windows\":\n",
    "            result = subprocess.check_output(\"wmic product get name,version\", shell=True).decode()\n",
    "            if \"Python 2\" in result:\n",
    "                outdated.append(\"Python 2 (deprecated)\")\n",
    "    except Exception as e:\n",
    "        outdated.append(f\"Error checking software: {e}\")\n",
    "    return outdated\n",
    "\n",
    "# Function to check for misconfigurations\n",
    "def check_misconfigurations():\n",
    "    status_box.insert(tk.END, \"Checking system misconfigurations...\\n\")\n",
    "    status_box.see(tk.END)\n",
    "    root.update()\n",
    "    issues = []\n",
    "    if os.name == \"nt\":\n",
    "        firewall_status = subprocess.getoutput(\"netsh advfirewall show allprofiles state\")\n",
    "        if \"OFF\" in firewall_status:\n",
    "            issues.append(\"Windows Firewall is turned off!\")\n",
    "    else:\n",
    "        ssh_status = subprocess.getoutput(\"systemctl is-active ssh\")\n",
    "        if ssh_status == \"active\":\n",
    "            issues.append(\"SSH service is running (Potential risk)\")\n",
    "    return issues\n",
    "\n",
    "# Optimized malware scanning function\n",
    "def check_malware():\n",
    "    status_box.insert(tk.END, \"Scanning for malware signatures...\\n\")\n",
    "    status_box.see(tk.END)\n",
    "    root.update()\n",
    "    suspicious_files = []\n",
    "    directories = [\"C:\\\\Windows\\\\System32\", \"C:\\\\Users\"] if os.name == \"nt\" else [\"/usr/bin\", \"/home\"]\n",
    "    known_signatures = {\"e99a18c428cb38d5f260853678922e03\": \"Malware.exe\"}\n",
    "    \n",
    "    for directory in directories:\n",
    "        for root_dir, _, files in os.walk(directory):\n",
    "            for file in files[:5]:  # Limit to 5 files per directory for speed\n",
    "                if not scan_running:\n",
    "                    status_box.insert(tk.END, \"Scan stopped by user.\\n\")\n",
    "                    status_box.see(tk.END)\n",
    "                    return []\n",
    "                file_path = os.path.join(root_dir, file)\n",
    "                try:\n",
    "                    with open(file_path, \"rb\") as f:\n",
    "                        file_hash = hashlib.md5(f.read(1024)).hexdigest()  # Scan only the first 1KB\n",
    "                        if file_hash in known_signatures:\n",
    "                            suspicious_files.append(file_path)\n",
    "                except:\n",
    "                    pass\n",
    "            status_box.insert(tk.END, f\"Scanning {directory}...\\n\")\n",
    "            status_box.see(tk.END)\n",
    "            root.update()\n",
    "    return suspicious_files\n",
    "\n",
    "# Main function to execute all scans in a thread\n",
    "def run_scan():\n",
    "    global scan_running\n",
    "    scan_running = True\n",
    "    \n",
    "    def scan():\n",
    "        target_ip = \"127.0.0.1\"\n",
    "        status_box.insert(tk.END, \"Starting security vulnerability scan...\\n\")\n",
    "        status_box.see(tk.END)\n",
    "        root.update()\n",
    "        results = {\n",
    "            \"Open Ports\": scan_ports(target_ip),\n",
    "            \"Outdated Software\": check_software(),\n",
    "            \"Misconfigurations\": check_misconfigurations(),\n",
    "            \"Suspicious Files\": check_malware()\n",
    "        }\n",
    "        status_box.insert(tk.END, \"Scan completed. Results displayed below.\\n\")\n",
    "        status_box.see(tk.END)\n",
    "        output_text.delete(\"1.0\", tk.END)\n",
    "        output_text.insert(tk.END, \"--- Scan Results ---\\n\")\n",
    "        for key, value in results.items():\n",
    "            output_text.insert(tk.END, f\"{key}: {value if value else 'No issues found'}\\n\")\n",
    "        report_file = \"scan_report.txt\"\n",
    "        with open(report_file, \"w\") as report:\n",
    "            for key, value in results.items():\n",
    "                report.write(f\"{key}: {value}\\n\")\n",
    "        messagebox.showinfo(\"Scan Complete\", \"Scan finished. Results saved in scan_report.txt\")\n",
    "        os.system(f\"notepad {report_file}\" if os.name == \"nt\" else f\"xdg-open {report_file}\")\n",
    "    \n",
    "    threading.Thread(target=scan, daemon=True).start()\n",
    "\n",
    "# Function to stop scan\n",
    "def stop_scan():\n",
    "    global scan_running\n",
    "    scan_running = False\n",
    "    status_box.insert(tk.END, \"Stopping scan...\\n\")\n",
    "    status_box.see(tk.END)\n",
    "\n",
    "# GUI Setup\n",
    "root = tk.Tk()\n",
    "root.title(\"Security Vulnerability Scanner\")\n",
    "root.geometry(\"800x550\")\n",
    "root.configure(bg=\"#2E2E2E\")\n",
    "\n",
    "status_box = scrolledtext.ScrolledText(root, width=90, height=4, font=(\"Courier\", 10), bg=\"#1E1E1E\", fg=\"#00FF00\", insertbackground=\"white\")\n",
    "status_box.pack(pady=10)\n",
    "\n",
    "frame = tk.Frame(root, bg=\"#2E2E2E\")\n",
    "frame.pack(pady=10)\n",
    "\n",
    "scan_button = tk.Button(frame, text=\"Start Scan\", command=run_scan, width=20, height=2, font=(\"Arial\", 12, \"bold\"), bg=\"#4CAF50\", fg=\"white\", relief=\"raised\", bd=3)\n",
    "scan_button.pack(side=tk.LEFT, padx=10)\n",
    "\n",
    "stop_button = tk.Button(frame, text=\"Stop Scan\", command=stop_scan, width=20, height=2, font=(\"Arial\", 12, \"bold\"), bg=\"#FF5733\", fg=\"white\", relief=\"raised\", bd=3)\n",
    "stop_button.pack(side=tk.LEFT, padx=10)\n",
    "\n",
    "output_text = scrolledtext.ScrolledText(root, width=90, height=20, font=(\"Courier\", 10), bg=\"#1E1E1E\", fg=\"#00FF00\", insertbackground=\"white\")\n",
    "output_text.pack(pady=10)\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f26b9b16-f248-4ad4-ab41-45ae439b5082",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
